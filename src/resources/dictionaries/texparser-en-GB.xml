<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<comment>GB English language file for texparserapp</comment>

<!--  About dialog -->
<entry key="about.title">About {0}</entry>
<entry key="about.version">{0} ({1})</entry>
<entry key="about.library.version">Bundled with {0} version {1} ({2})</entry>
<entry key="about.licence">License</entry>
<entry key="about.legal">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.</entry>
<entry key="about.translated_by">Translated by {0}</entry>
<entry key="about.translator_info"></entry>
<entry key="about.acknowledgements"></entry>

<!--  Syntax -->
<entry key="syntax.title">Syntax:</entry>
<entry key="syntax.opt_in">{0} [&lt;option&gt;]+ --in &lt;TeX file&gt;</entry>
<entry key="syntax.general">General Options:</entry>
<entry key="syntax.in">{0} (or {1}) &lt;TeX file&gt;		Parse &lt;TeX file&gt;.</entry>
<entry key="syntax.version">{0} (or {1})		Print version and exit.</entry>
<entry key="syntax.help">{0} (or {1})			Print this help message and exit.</entry>
<entry key="syntax.debug">{0} [&lt;level&gt;]			Switch on debug mode.</entry>
<entry key="syntax.nodebug">{0}			Switch off debug mode. (Default.)</entry>
<entry key="syntax.debug-mode">{0} &lt;value&gt;			Debug verbosity. The value may be an integer or a comma-separated list of keywords:
	all	Extremely verbose!
	io	I/O operations
	popped	Object popped from a stack
	decl	Declarations
	sty-data	Package data
	expansion	Whenever an object is expanded
	expansion-list	Whenever a list is expanded
	expansion-once	Whenever an object is expanded once
	expansion-once-list Whenever a list is expanded once
	process		Whenever an object is processed
	process-stack	Whenever a stack is processed
	cs		Control sequence
	process-generic-cs	Whenever a GenericCommand is processed
	catcode	Whenever a category code changes
	read	Whenever a codepoint is read from a file
</entry>
<entry key="syntax.log">{0} &lt;file&gt;				Set log file.</entry>
<entry key="syntax.nolog">{0}				Don''t log (default).</entry>
<entry key="syntax.timeout">{0} &lt;n&gt;			Timeout processes after &lt;n&gt; milliseconds.</entry>
<entry key="syntax.output.options">Output Options:</entry>
<entry key="syntax.out">{0} (or {1}) &lt;directory&gt;	Save output in &lt;directory&gt;, 
				which must not already exist.</entry>
<entry key="syntax.latex">{0}				Set the output format to LaTeX (default)</entry>
<entry key="syntax.html">{0}				Set the output format to HTML</entry>
<entry key="syntax.out.charset">{0} &lt;charset&gt;			Set the character encoding to &lt;charset&gt; for the output files.</entry>
<entry key="syntax.html.options">HTML Options:</entry>
<entry key="syntax.head">{0} &lt;html&gt;			Add &lt;head&gt; code to HTML header.</entry>
<entry key="syntax.mathjax">{0} 			Use MathJax.</entry>
<entry key="syntax.entities">{0} 			Use HTML entities for non-ASCII characters.</entry>
<entry key="syntax.bugreport">Report bugs to: {0}</entry>
<entry key="syntax.homepage">{0} home page: {1}</entry>

<!--  Error messages -->

<entry key="error.title">Error</entry>
<entry key="error.message">Error Message</entry>
<entry key="error.message.mnemonic">M</entry>
<entry key="error.stacktrace">Stack Trace</entry>
<entry key="error.stacktrace.mnemonic">T</entry>
<entry key="error.line_with_code">Line {0}: {1} (error code {2}).</entry>
<entry key="error.unknown">Unknown error</entry>
<entry key="error.exec_failed">Failed to execute: {0}</entry>
<entry key="error.app_failed">{0} failed with exit code {1}</entry>
<entry key="error.interrupted">Process interrupted</entry>
<entry key="error.syntax">Syntax error: {0}</entry>
<entry key="error.syntax.unknown_option">Unknown option ''{0}''. (Use --help or -h for help.)</entry>
<entry key="error.syntax.only_one">Only one {0} permitted</entry>
<entry key="error.syntax.only_one_input">Only one input file permitted</entry>
<entry key="error.syntax.missing_filename">Filename expected after {0}</entry>
<entry key="error.syntax.missing_input">File name expected after {0}</entry>
<entry key="error.syntax.batch.missing_in">Input file required for batch mode (use ''{0}'' for help).</entry>
<entry key="error.syntax.batch.missing_out">Output directory required for batch mode</entry>
<entry key="error.syntax.missing_mode">Mode expected after {0}</entry>
<entry key="error.syntax.missing_value">Value expected after {0}</entry>
<entry key="error.syntax.number_expected">Number expected after {0}. Found: ''{1}''</entry>
<entry key="error.syntax.batch.unknown_format">Unknown format ''{0}''</entry>
<entry key="error.exists">{0} already exists</entry>
<entry key="error.syntax.unknown_debug_mode">Unknown debug mode ''{0}''</entry>
<entry key="error.bksl_in_kpsewhich">Unexpected \ found in kpsewhich({0}). A command may not have been properly expanded.</entry>

</properties>
